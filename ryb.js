// Generated by CoffeeScript 1.3.1
var Points, RYB, cbrt, display, generate, generateColors, numberColors,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

cbrt = function(x) {
  return (x < 0 ? -1 : 1) * Math.pow(Math.abs(x), 1 / 3);
};

RYB = {
  white: [1, 1, 1],
  red: [1, 0, 0],
  yellow: [1, 1, 0],
  blue: [0.163, 0.373, 0.6],
  violet: [0.5, 0, 0.5],
  green: [0, 0.66, 0.2],
  orange: [1, 0.5, 0],
  black: [0.2, 0.094, 0.0],
  rgb: function(r, y, b) {
    var i, _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 2; i = ++_i) {
      _results.push(RYB.white[i] * (1 - r) * (1 - b) * (1 - y) + RYB.red[i] * r * (1 - b) * (1 - y) + RYB.blue[i] * (1 - r) * b * (1 - y) + RYB.violet[i] * r * b * (1 - y) + RYB.yellow[i] * (1 - r) * (1 - b) * y + RYB.orange[i] * r * (1 - b) * y + RYB.green[i] * (1 - r) * b * y + RYB.black[i] * r * b * y);
    }
    return _results;
  }
};

Points = (function(_super) {

  __extends(Points, _super);

  Points.name = 'Points';

  function Points(number) {
    var base, n, _i, _ref;
    base = Math.ceil(Math.pow(number, 1 / 3));
    for (n = _i = 0, _ref = Math.pow(base, 3); 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
      this.push([Math.floor(n / (base * base)) / (base - 1), Math.floor(n / base % base) / (base - 1), Math.floor(n % base) / (base - 1)]);
    }
    this.picked = [];
  }

  Points.prototype.distance = function(p1) {
    return this.picked.map(function(p2) {
      return [0, 1, 2].map(function(i) {
        return Math.pow(p1[i] - p2[i], 2);
      }).reduce(function(a, b) {
        return a + b;
      });
    }).reduce(function(a, b) {
      return a + b;
    });
  };

  Points.prototype.pick = function(point) {
    var index, pick, _, _ref,
      _this = this;
    if (point == null) {
      point = null;
    }
    if (point == null) {
      pick = this.shift();
    } else {
      _ref = this.reduce(function(_arg, p2, i2) {
        var d1, d2, i1;
        i1 = _arg[0], d1 = _arg[1];
        d2 = _this.distance(p2);
        if (d1 < d2) {
          return [i2, d2];
        } else {
          return [i1, d1];
        }
      }, [0, this.distance(this[0])]), index = _ref[0], _ = _ref[1];
      pick = this.splice(index, 1)[0];
    }
    this.picked.push(pick);
    return pick;
  };

  return Points;

})(Array);

generate = document.getElementById('generate');

numberColors = document.getElementById('number-colors');

display = document.getElementById('colors');

generateColors = function() {
  var b, color, el, g, i, number, point, points, r, _i, _ref, _results;
  while (display.firstChild) {
    display.removeChild(display.firstChild);
  }
  number = parseInt(numberColors.value, 10);
  points = new Points(number);
  point = null;
  _results = [];
  for (i = _i = 1; 1 <= number ? _i <= number : _i >= number; i = 1 <= number ? ++_i : --_i) {
    point = points.pick(point);
    _ref = RYB.rgb.apply(RYB, point).map(function(x) {
      return Math.floor(255 * x);
    }), r = _ref[0], g = _ref[1], b = _ref[2];
    color = "rgb(" + r + ", " + g + ", " + b + ")";
    el = document.createElement("div");
    el.setAttribute("class", "color");
    el.setAttribute("title", color);
    el.style.backgroundColor = color;
    _results.push(display.appendChild(el));
  }
  return _results;
};

generate.addEventListener('click', generateColors);

numberColors.addEventListener('input', generateColors);

numberColors.addEventListener('submit', generateColors);

generateColors();
